name: CI/CD

on:
  push:
    tags: [v*]
    branches:
      - main
  pull_request:
    # By default, a workflow only runs when a pull_request event's activity type is opened,
    # synchronize, or reopened.
    types: [opened, synchronize, reopened, edited]
    branches:
      - main

permissions: read-all

jobs:
  code-quality:
    if: |
      ! cancelled() && always() &&
      ! startsWith(github.ref, 'refs/tags')
    permissions:
      # For trunk to post annotations
      checks: write
      # For repo checkout
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - uses: astral-sh/setup-uv@v6
      # Install dependencies for all Python projects in the monorepo
      # Sync workspace members (api, families-api) from root
      - run: uv sync --frozen --dev
      # Sync standalone projects
      - run: uv sync --frozen --no-install-project --dev
        working-directory: backend-api
      # @related BACKEND_API_PYRIGHT_HACK
      # This is a little hack to make sure we have pyright available by the pyright-backend-api trunk definition
      - run: pip install pyright==1.1.361
      - name: Trunk Check
        uses: trunk-io/trunk-action@v1
        with:
          arguments: --ci
  non-search-tests:
    defaults:
      run:
        working-directory: backend-api
    if: |
      ! cancelled() && always() &&
      ! startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use .env.example
        run: cp .env.example .env

      - name: Get python Container
        run: docker pull python:3.12

      - name: Build
        run: |
          docker compose build
          docker images

      - name: Build docker-compose stack
        run: make start_without_vespa_setup

      - name: Wait for backend to open port
        run: ./wait_for_port.sh localhost 8888 60

      - name: Run backend tests
        run: make test_non_search

      - name: Docker debug
        run: |
          docker compose logs
          docker compose ps
          docker ps -a
          ls -la

      - name: Log Dump
        if: always() && ! cancelled()
        run: docker compose logs

  search-tests:
    defaults:
      run:
        working-directory: backend-api
    if: |
      ! cancelled() && always() &&
      ! startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use .env.example
        run: cp .env.example .env

      - name: Get python Container
        run: docker pull python:3.12

      - name: Install latest Vespa CLI
        env:
          VESPA_CLI_VERSION: 8.250.43
        run: |
          mkdir -p scripts/vespa-cli
          curl -fsSL https://github.com/vespa-engine/vespa/releases/download/v${VESPA_CLI_VERSION}/vespa-cli_${VESPA_CLI_VERSION}_linux_amd64.tar.gz | \
            tar -zxf - -C scripts/vespa-cli --strip-component=1
          echo "scripts/vespa-cli/bin" >> $GITHUB_PATH

      - name: Build docker-compose stack & Setup vespa for search
        run: make start

      - name: Run backend search tests for vespa
        run: make test_search

      - name: Log Dump
        if: always() && ! cancelled()
        run: docker compose logs

  integration-tests:
    if: |
      ! cancelled() && always() &&
      ! startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    steps:
      - name: Run Integration Tests
        run: echo TODO-TODO-TODO-TODO-TODO-TODO-TODO-TODO-TODO-TODO-TODO-TODO
