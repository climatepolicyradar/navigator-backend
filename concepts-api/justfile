# dev
# should be used for first run
bootstrap:
    just initial-data

initial-data environment:
    @echo "ðŸ”„ downloading latest data from s3"
    echo "=== AWS Identity Check ==="
    aws sts get-caller-identity
    
    echo "=== Testing basic AWS access ==="
    aws s3 ls || echo "Cannot list any S3 buckets"
    
    echo "=== Testing ECR access (which should work) ==="
    aws ecr describe-repositories --region eu-west-1 || echo "ECR access failed"
    
    echo "=== Testing if the bucket exists at all ==="
    aws s3api head-bucket --bucket cpr-staging-document-cache --region eu-west-1 || echo "Bucket doesn't exist or no access"
    
    echo "=== Testing with explicit region ==="
    aws s3 ls s3://cpr-staging-document-cache/ --region eu-west-1 || echo "Regional access failed"
    
    echo "=== Check what account we're in ==="
    aws sts get-caller-identity --query 'Account' --output text
    aws s3 sync s3://cpr-{{environment}}-document-cache/concepts initial-data
    poetry run python create_duckdb.py

dev:
    just initial-data production
    docker compose up

# build
# TODO: this needs to be tied into a lifecycle somewhere to make sure it is run if something is added
# sed is used here to remove a whole bunch of gumpf you can not remove with poetry v1 
requirements:
    poetry export --without-hashes --without-urls --format requirements.txt | sed 's/ ;.*//'  > requirements.txt

# Local docker development
ecr-login:
    aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin $(aws sts get-caller-identity --query 'Account' --output text).dkr.ecr.eu-west-1.amazonaws.com

docker-build tag environment:
    just initial-data {{environment}}
    # @related: GITHUB_SHA_ENV_VAR
    docker buildx build --platform linux/amd64 --output type=docker --build-arg GITHUB_SHA=$(git rev-parse HEAD) -t concepts-api:{{tag}} .

docker-push tag:
    docker tag concepts-api:{{tag}} $(aws sts get-caller-identity --query 'Account' --output text).dkr.ecr.eu-west-1.amazonaws.com/concepts-api:{{tag}}
    docker push $(aws sts get-caller-identity --query 'Account' --output text).dkr.ecr.eu-west-1.amazonaws.com/concepts-api:{{tag}}

deploy-local tag environment:
    just ecr-login
    just requirements
    just deploy {{tag}} {{environment}}

deploy tag environment:
    just docker-build {{tag}} {{environment}}
    just docker-push {{tag}}
