# dev
# should be used for first run
bootstrap:
    just initial-data

    @echo "🚀 starting db docker container to load in data"
    docker compose up -d db

    @echo "⏳ waiting for Postgres to become healthy"
    @bash just-scripts/is-container-healthy.sh db

    @echo "✅ Bootstrap complete — shutting down"
    docker compose down

initial-data:
    # TODO: find a way to ensure we're using the latest dump
    # TODO: we should make this environment specific when we know the locations of these files
    # this isn't used for building the actual image though, so it's OK for now
    @echo "🔄 downloading latest dump from s3"
    aws s3 cp s3://cpr-production-rds/dumps/2025-04-23-navigator-production.sql ./initial-data/2025-04-23-navigator-production.sql


dev:
    docker compose up

# build
# TODO: this needs to be tied into a lifecycle somewhere to make sure it is run if something is added
# sed is used here to remove a whole bunch of gumpf you can not remove with poetry v1 
requirements:
    poetry export --without-hashes --without-urls --format requirements.txt | sed 's/ ;.*//'  > requirements.txt

# Local docker development
ecr-login:
    aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin $(aws sts get-caller-identity --query 'Account' --output text).dkr.ecr.eu-west-1.amazonaws.com

docker-build tag:
    # @related: GITHUB_SHA_ENV_VAR
    docker buildx build --platform linux/amd64 --output type=docker --build-arg GITHUB_SHA=$(git rev-parse HEAD) -t families-api:{{tag}} .

docker-push tag:
    docker tag families-api:{{tag}} $(aws sts get-caller-identity --query 'Account' --output text).dkr.ecr.eu-west-1.amazonaws.com/families-api:{{tag}}
    docker push $(aws sts get-caller-identity --query 'Account' --output text).dkr.ecr.eu-west-1.amazonaws.com/families-api:{{tag}}

deploy-local tag:
    just ecr-login
    just requirements
    just deploy {{tag}}

deploy tag:
    just docker-build {{tag}}
    just docker-push {{tag}}
