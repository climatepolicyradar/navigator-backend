/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  APIItemResponseFamilyPublic,
  APIListResponseGeographyDocumentCount,
  APIListResponsePhysicalDocumentPublic,
  HTTPValidationError,
} from "../models/index";
import {
  APIItemResponseFamilyPublicFromJSON,
  APIItemResponseFamilyPublicToJSON,
  APIListResponseGeographyDocumentCountFromJSON,
  APIListResponseGeographyDocumentCountToJSON,
  APIListResponsePhysicalDocumentPublicFromJSON,
  APIListResponsePhysicalDocumentPublicToJSON,
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
} from "../models/index";

export interface ReadFamilyFamiliesFamilyIdGetRequest {
  familyId: string;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * Docs By Geo
   */
  async docsByGeoFamiliesAggregationsByGeographyGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<APIListResponseGeographyDocumentCount>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/families/aggregations/by-geography`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      APIListResponseGeographyDocumentCountFromJSON(jsonValue),
    );
  }

  /**
   * Docs By Geo
   */
  async docsByGeoFamiliesAggregationsByGeographyGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<APIListResponseGeographyDocumentCount> {
    const response =
      await this.docsByGeoFamiliesAggregationsByGeographyGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Health Check
   */
  async healthCheckFamiliesHealthGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/families/health`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Health Check
   */
  async healthCheckFamiliesHealthGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.healthCheckFamiliesHealthGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Health Check
   */
  async healthCheckHealthGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/health`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Health Check
   */
  async healthCheckHealthGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response = await this.healthCheckHealthGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Read Concepts
   */
  async readConceptsFamiliesConceptsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<any>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/families/concepts`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get("content-type"))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Read Concepts
   */
  async readConceptsFamiliesConceptsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<any> {
    const response =
      await this.readConceptsFamiliesConceptsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Read Documents
   */
  async readDocumentsFamiliesGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<APIListResponsePhysicalDocumentPublic>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/families/`;

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      APIListResponsePhysicalDocumentPublicFromJSON(jsonValue),
    );
  }

  /**
   * Read Documents
   */
  async readDocumentsFamiliesGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<APIListResponsePhysicalDocumentPublic> {
    const response = await this.readDocumentsFamiliesGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Read Family
   */
  async readFamilyFamiliesFamilyIdGetRaw(
    requestParameters: ReadFamilyFamiliesFamilyIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<APIItemResponseFamilyPublic>> {
    if (requestParameters["familyId"] == null) {
      throw new runtime.RequiredError(
        "familyId",
        'Required parameter "familyId" was null or undefined when calling readFamilyFamiliesFamilyIdGet().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    let urlPath = `/families/{family_id}`;
    urlPath = urlPath.replace(
      `{${"family_id"}}`,
      encodeURIComponent(String(requestParameters["familyId"])),
    );

    const response = await this.request(
      {
        path: urlPath,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      APIItemResponseFamilyPublicFromJSON(jsonValue),
    );
  }

  /**
   * Read Family
   */
  async readFamilyFamiliesFamilyIdGet(
    requestParameters: ReadFamilyFamiliesFamilyIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<APIItemResponseFamilyPublic> {
    const response = await this.readFamilyFamiliesFamilyIdGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
