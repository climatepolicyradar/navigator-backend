/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { FamilyEventPublic } from "./FamilyEventPublic";
import {
  FamilyEventPublicFromJSON,
  FamilyEventPublicFromJSONTyped,
  FamilyEventPublicToJSON,
  FamilyEventPublicToJSONTyped,
} from "./FamilyEventPublic";
import type { FamilyDocumentPublic } from "./FamilyDocumentPublic";
import {
  FamilyDocumentPublicFromJSON,
  FamilyDocumentPublicFromJSONTyped,
  FamilyDocumentPublicToJSON,
  FamilyDocumentPublicToJSONTyped,
} from "./FamilyDocumentPublic";
import type { Corpus } from "./Corpus";
import {
  CorpusFromJSON,
  CorpusFromJSONTyped,
  CorpusToJSON,
  CorpusToJSONTyped,
} from "./Corpus";

/**
 *
 * @export
 * @interface FamilyPublic
 */
export interface FamilyPublic {
  /**
   *
   * @type {string}
   * @memberof FamilyPublic
   */
  importId: string;
  /**
   *
   * @type {string}
   * @memberof FamilyPublic
   */
  title: string;
  /**
   *
   * @type {Array<{ [key: string]: any; }>}
   * @memberof FamilyPublic
   */
  concepts: Array<{ [key: string]: any }>;
  /**
   *
   * @type {Corpus}
   * @memberof FamilyPublic
   */
  corpus: Corpus;
  /**
   *
   * @type {string}
   * @memberof FamilyPublic
   */
  readonly corpusId: string;
  /**
   *
   * @type {string}
   * @memberof FamilyPublic
   */
  readonly organisation: string;
  /**
   *
   * @type {string}
   * @memberof FamilyPublic
   */
  organisationAttributionUrl: string | null;
  /**
   *
   * @type {string}
   * @memberof FamilyPublic
   */
  readonly summary: string;
  /**
   *
   * @type {Array<string>}
   * @memberof FamilyPublic
   */
  geographies: Array<string>;
  /**
   *
   * @type {Date}
   * @memberof FamilyPublic
   */
  publishedDate: Date | null;
  /**
   *
   * @type {Date}
   * @memberof FamilyPublic
   */
  lastUpdatedDate: Date | null;
  /**
   *
   * @type {string}
   * @memberof FamilyPublic
   */
  readonly slug: string;
  /**
   *
   * @type {string}
   * @memberof FamilyPublic
   */
  readonly category: string;
  /**
   *
   * @type {string}
   * @memberof FamilyPublic
   */
  readonly corpusTypeName: string;
  /**
   *
   * @type {Array<{ [key: string]: any; }>}
   * @memberof FamilyPublic
   */
  collections: Array<{ [key: string]: any }>;
  /**
   *
   * @type {Array<FamilyEventPublic>}
   * @memberof FamilyPublic
   */
  events: Array<FamilyEventPublic>;
  /**
   *
   * @type {Array<FamilyDocumentPublic>}
   * @memberof FamilyPublic
   */
  documents: Array<FamilyDocumentPublic>;
  /**
   *
   * @type {{ [key: string]: any; }}
   * @memberof FamilyPublic
   */
  readonly metadata: { [key: string]: any };
}

/**
 * Check if a given object implements the FamilyPublic interface.
 */
export function instanceOfFamilyPublic(value: object): value is FamilyPublic {
  if (!("importId" in value) || value["importId"] === undefined) return false;
  if (!("title" in value) || value["title"] === undefined) return false;
  if (!("concepts" in value) || value["concepts"] === undefined) return false;
  if (!("corpus" in value) || value["corpus"] === undefined) return false;
  if (!("corpusId" in value) || value["corpusId"] === undefined) return false;
  if (!("organisation" in value) || value["organisation"] === undefined)
    return false;
  if (
    !("organisationAttributionUrl" in value) ||
    value["organisationAttributionUrl"] === undefined
  )
    return false;
  if (!("summary" in value) || value["summary"] === undefined) return false;
  if (!("geographies" in value) || value["geographies"] === undefined)
    return false;
  if (!("publishedDate" in value) || value["publishedDate"] === undefined)
    return false;
  if (!("lastUpdatedDate" in value) || value["lastUpdatedDate"] === undefined)
    return false;
  if (!("slug" in value) || value["slug"] === undefined) return false;
  if (!("category" in value) || value["category"] === undefined) return false;
  if (!("corpusTypeName" in value) || value["corpusTypeName"] === undefined)
    return false;
  if (!("collections" in value) || value["collections"] === undefined)
    return false;
  if (!("events" in value) || value["events"] === undefined) return false;
  if (!("documents" in value) || value["documents"] === undefined) return false;
  if (!("metadata" in value) || value["metadata"] === undefined) return false;
  return true;
}

export function FamilyPublicFromJSON(json: any): FamilyPublic {
  return FamilyPublicFromJSONTyped(json, false);
}

export function FamilyPublicFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): FamilyPublic {
  if (json == null) {
    return json;
  }
  return {
    importId: json["import_id"],
    title: json["title"],
    concepts: json["concepts"],
    corpus: CorpusFromJSON(json["corpus"]),
    corpusId: json["corpus_id"],
    organisation: json["organisation"],
    organisationAttributionUrl: json["organisation_attribution_url"],
    summary: json["summary"],
    geographies: json["geographies"],
    publishedDate:
      json["published_date"] == null ? null : new Date(json["published_date"]),
    lastUpdatedDate:
      json["last_updated_date"] == null
        ? null
        : new Date(json["last_updated_date"]),
    slug: json["slug"],
    category: json["category"],
    corpusTypeName: json["corpus_type_name"],
    collections: json["collections"],
    events: (json["events"] as Array<any>).map(FamilyEventPublicFromJSON),
    documents: (json["documents"] as Array<any>).map(
      FamilyDocumentPublicFromJSON,
    ),
    metadata: json["metadata"],
  };
}

export function FamilyPublicToJSON(json: any): FamilyPublic {
  return FamilyPublicToJSONTyped(json, false);
}

export function FamilyPublicToJSONTyped(
  value?: Omit<
    FamilyPublic,
    | "corpus_id"
    | "organisation"
    | "summary"
    | "slug"
    | "category"
    | "corpus_type_name"
    | "metadata"
  > | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    import_id: value["importId"],
    title: value["title"],
    concepts: value["concepts"],
    corpus: CorpusToJSON(value["corpus"]),
    organisation_attribution_url: value["organisationAttributionUrl"],
    geographies: value["geographies"],
    published_date: (value["publishedDate"] as any).toISOString(),
    last_updated_date: (value["lastUpdatedDate"] as any).toISOString(),
    collections: value["collections"],
    events: (value["events"] as Array<any>).map(FamilyEventPublicToJSON),
    documents: (value["documents"] as Array<any>).map(
      FamilyDocumentPublicToJSON,
    ),
  };
}
