/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 *
 * @export
 * @interface FamilyEventPublic
 */
export interface FamilyEventPublic {
  /**
   *
   * @type {string}
   * @memberof FamilyEventPublic
   */
  title: string;
  /**
   *
   * @type {Date}
   * @memberof FamilyEventPublic
   */
  date: Date;
  /**
   *
   * @type {string}
   * @memberof FamilyEventPublic
   */
  eventType: string;
  /**
   *
   * @type {string}
   * @memberof FamilyEventPublic
   */
  status: string;
  /**
   *
   * @type {{ [key: string]: any; }}
   * @memberof FamilyEventPublic
   */
  metadata: { [key: string]: any } | null;
}

/**
 * Check if a given object implements the FamilyEventPublic interface.
 */
export function instanceOfFamilyEventPublic(
  value: object,
): value is FamilyEventPublic {
  if (!("title" in value) || value["title"] === undefined) return false;
  if (!("date" in value) || value["date"] === undefined) return false;
  if (!("eventType" in value) || value["eventType"] === undefined) return false;
  if (!("status" in value) || value["status"] === undefined) return false;
  if (!("metadata" in value) || value["metadata"] === undefined) return false;
  return true;
}

export function FamilyEventPublicFromJSON(json: any): FamilyEventPublic {
  return FamilyEventPublicFromJSONTyped(json, false);
}

export function FamilyEventPublicFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): FamilyEventPublic {
  if (json == null) {
    return json;
  }
  return {
    title: json["title"],
    date: new Date(json["date"]),
    eventType: json["event_type"],
    status: json["status"],
    metadata: json["metadata"],
  };
}

export function FamilyEventPublicToJSON(json: any): FamilyEventPublic {
  return FamilyEventPublicToJSONTyped(json, false);
}

export function FamilyEventPublicToJSONTyped(
  value?: FamilyEventPublic | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    title: value["title"],
    date: value["date"].toISOString(),
    event_type: value["eventType"],
    status: value["status"],
    metadata: value["metadata"],
  };
}
