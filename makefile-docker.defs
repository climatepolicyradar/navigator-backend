# definitions for docker-based development

# ----------------------------------
# starting, stopping, migrating DB
# ----------------------------------
start_containers:
	# Build and run containers
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d --remove-orphans

start_backendonly:
	# Build and run containers
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d backend backend_db

show_logs:
	docker-compose logs -f

start: start_containers migrations

start_backend: start_backendonly migrations

stop:
	docker-compose stop

remove_volumes:
	docker-compose down -v

up:
	# docker-compose up, without -d
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

# ----------------------------------
# database maintenance
# ----------------------------------

migrations_docker_backend:
	# Create initial data in database
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml run --rm backend python3 app/initial_data.py

cleanup_tables:
	# Cleanup duplicate data
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml run --rm backend python3 scripts/cleanup_lookups/cleanup_lookups.py

add_unique_ids:
	# Cleanup duplicate data
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml run --rm backend python3 scripts/add_unique_ids/add_unique_ids.py

migrations: migrations_docker_backend

%:
	@:

new_migration_backend:
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml run --rm backend alembic revision --autogenerate -m "$(filter-out $@,$(MAKECMDGOALS))"

refresh_all_dbs:
	docker-compose down -v
	make start

# ----------------------------------
# building images
# ----------------------------------
build_bats:
	docker build bats -t bats-with-helpers:latest

build:
	docker-compose build --no-cache backend

# ----------------------------------
# testing
# ----------------------------------

test_bashscripts: build_bats
	docker run --rm -v "${PWD}/.github:/code" bats-with-helpers:latest /code/tests/test_retag_and_push.bats

vespa_confirm_cli_installed:
	@if [ ! $$(which vespa) ]; then \
		echo 'ERROR: The vespa cli is not installed, please install and try again:' ; \
		echo 'https://docs.vespa.ai/en/vespa-cli.html'; \
		exit 1; \
	fi

vespa_healthy:
	@if [ ! $$(curl -f -s 'http://localhost:19071/status.html') ]; then \
		echo 'ERROR: Bad response from local vespa cluster, is it running?'; \
		exit 1; \
	fi

.ONESHELL:
vespa_deploy_schema:
	vespa config set target local
	@vespa deploy tests/search_fixtures/vespa_test_schema --wait 300

.ONESHELL:
vespa_load_data:
	vespa config set target local
	vespa feed --progress=3 tests/search_fixtures/vespa_search_weights.json
	vespa feed --progress=3 tests/search_fixtures/vespa_family_document.json
	vespa feed --progress=3 tests/search_fixtures/vespa_document_passage.json

vespa_setup: vespa_confirm_cli_installed vespa_healthy vespa_deploy_schema vespa_load_data

.ONESHELL:
test_search:
	docker-compose \
		-f docker-compose.yml \
		-f docker-compose.dev.yml \
		run --rm --name search_test \
		-v "${PWD}/data:/data" \
		backend pytest \
		-vvv tests/routes/test_vespasearch.py \
		-m 'search'

test_cors:
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml run --rm backend pytest -vvv -m 'cors'

test_unit:
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml run --rm backend pytest -vvv tests/unit

test:
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml run --rm backend pytest -vvv --test-alembic -m 'not search'

# ----------------------------------
# tasks
# ----------------------------------

postgres_dump:
	docker-compose run -v ${PWD}/backend:/app/data --rm backend_db pg_dump -d ${DATABASE_URL} --data-only -F c --file /app/data/backend_db_dump.dump
