# definitions for docker-based development

# ----------------------------------
# starting, stopping, migrating DB
# ----------------------------------
start_containers:
	# Build and run containers
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d

start_backendonly:
	# Build and run containers
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d backend backend_db

show_logs:
	docker-compose logs -f

start: start_containers migrations

start_backend: start_backendonly migrations

stop:
	docker-compose stop

remove_volumes:
	docker-compose down -v

up:
	# docker-compose up, without -d
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

# ----------------------------------
# database maintenance
# ----------------------------------

migrations_docker_backend:
	# Create initial data in database
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml run --rm backend python3 app/initial_data.py

cleanup_tables:
	# Cleanup duplicate data
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml run --rm backend python3 scripts/cleanup_lookups/cleanup_lookups.py

add_unique_ids:
	# Cleanup duplicate data
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml run --rm backend python3 scripts/add_unique_ids/add_unique_ids.py

migrations: migrations_docker_backend

%:
	@:

new_migration_backend:
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml run --rm backend alembic revision --autogenerate -m "$(filter-out $@,$(MAKECMDGOALS))"

refresh_all_dbs:
	docker-compose down -v
	make start

# ----------------------------------
# building images
# ----------------------------------
build_bats:
	docker build bats -t bats-with-helpers:latest

build:
	docker-compose build --no-cache backend

# ----------------------------------
# testing
# ----------------------------------

test_bashscripts: build_bats
	docker run --rm -v "${PWD}/.github:/code" bats-with-helpers:latest /code/tests/test_retag_and_push.bats

setup_test_search_index:
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml run --rm backend curl -XDELETE -u "${OPENSEARCH_USER}:${OPENSEARCH_PASSWORD}" ${OPENSEARCH_URL}/${OPENSEARCH_INDEX_PREFIX}* --insecure
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml run --rm opensearch-test-loader multielasticdump --direction=load --input=/cpr-backend/tests/data/ --output=${OPENSEARCH_URL} --ignoreType=template

test_opensearch: setup_test_search_index
	-docker rm search_test
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml run --name search_test -v "${PWD}/data:/data" backend pytest -vvv -m 'opensearch'
	docker cp search_test:/data/benchmark_browse.txt .
	docker cp search_test:/data/benchmark_search.txt .
	docker rm search_test

test_cors:
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml run --rm backend pytest -vvv -m 'cors'

test_unit:
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml run --rm backend pytest -vvv tests/unit

test:
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml run --rm backend pytest -vvv --test-alembic -m 'not opensearch'

# ----------------------------------
# tasks
# ----------------------------------

# Check OpenSearch running on localhost
check_opensearch_local:
	curl -XGET http://localhost:9200 -u 'admin:admin' --insecure

postgres_dump:
	docker-compose run -v ${PWD}/backend:/app/data --rm backend_db pg_dump -d ${DATABASE_URL} --data-only -F c --file /app/data/backend_db_dump.dump
