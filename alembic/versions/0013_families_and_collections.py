"""families and collections

Revision ID: 0013
Revises: 0012
Create Date: 2023-02-01 19:06:26.543145

"""
from alembic import op
from alembic.op import execute
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '0013'
down_revision = '0012'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('collection',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_collection'))
    )
    op.create_table('family_category',
    sa.Column('category_name', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('category_name', name=op.f('pk_family_category'))
    )
    op.create_table('family_document_type',
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('name', name=op.f('pk_family_document_type'))
    )
    op.create_table('family_type',
    sa.Column('type_name', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('type_name', name=op.f('pk_family_type'))
    )
    op.create_table('metadata_taxonomy',
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('valid_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.PrimaryKeyConstraint('name', name=op.f('pk_metadata_taxonomy'))
    )
    op.create_table('variant',
    sa.Column('variant_name', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('variant_name', name=op.f('pk_variant'))
    )
    op.create_table('collection_organisation',
    sa.Column('collection_id', sa.Integer(), nullable=False),
    sa.Column('organisation_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['collection_id'], ['collection.id'], name=op.f('fk_collection_organisation__collection_id__collection')),
    sa.ForeignKeyConstraint(['organisation_id'], ['organisation.id'], name=op.f('fk_collection_organisation__organisation_id__organisation')),
    sa.PrimaryKeyConstraint('collection_id', 'organisation_id', name=op.f('pk_collection_organisation'))
    )
    op.create_table('family',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('import_id', sa.Text(), nullable=True),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('geography_id', sa.Integer(), nullable=False),
    sa.Column('category_name', sa.Text(), nullable=False),
    sa.Column('family_type', sa.Text(), nullable=False),
    op.create_index(
        op.f("ix_family_import_id"), "family", ["import_id"], unique=True
    ),
    sa.ForeignKeyConstraint(['category_name'], ['family_category.category_name'], name=op.f('fk_family__category_name__family_category')),
    sa.ForeignKeyConstraint(['family_type'], ['family_type.type_name'], name=op.f('fk_family__family_type__family_type')),
    sa.ForeignKeyConstraint(['geography_id'], ['geography.id'], name=op.f('fk_family__geography_id__geography')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_family'))
    )
    op.create_table('metadata_organisation',
    sa.Column('taxonomy_name', sa.Text(), nullable=False),
    sa.Column('organisation_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['taxonomy_name'], ['metadata_taxonomy.name'], name=op.f('fk_metadata_organisation__taxonomy_name__metadata_taxonomy')),
    sa.ForeignKeyConstraint(['organisation_id'], ['organisation.id'], name=op.f('fk_metadata_organisation__organisation_id__organisation')),
    sa.PrimaryKeyConstraint('taxonomy_name', 'organisation_id', name=op.f('pk_metadata_organisation'))
    )
    op.create_table('collection_family',
    sa.Column('collection_id', sa.Integer(), nullable=False),
    sa.Column('family_id', sa.Text(), nullable=False),
    sa.ForeignKeyConstraint(['collection_id'], ['collection.id'], name=op.f('fk_collection_family__collection_id__collection')),
    sa.ForeignKeyConstraint(['family_id'], ['family.id'], name=op.f('fk_collection_family__family_id__family')),
    sa.PrimaryKeyConstraint('collection_id', 'family_id', name=op.f('pk_collection_family'))
    )
    op.create_table('family_document',
    sa.Column('family_id', sa.Text(), nullable=False),
    sa.Column('physical_document_id', sa.Integer(), nullable=False),
    sa.Column('cdn_url', sa.Text(), nullable=True),
    sa.Column('import_id', sa.Text(), nullable=True),
    sa.Column('variant_name', sa.Text(), nullable=False),
    sa.Column('document_status', sa.Enum('CREATED', 'PUBLISHED', 'DELETED', name='documentstatus'), nullable=True),
    sa.Column('document_type', sa.Text(), nullable=False),
    sa.ForeignKeyConstraint(['document_type'], ['family_document_type.name'], name=op.f('fk_family_document__document_type__family_document_type')),
    sa.ForeignKeyConstraint(['family_id'], ['family.id'], name=op.f('fk_family_document__family_id__family')),
    sa.ForeignKeyConstraint(['physical_document_id'], ['physical_document.id'], name=op.f('fk_family_document__physical_document_id__physical_document')),
    sa.ForeignKeyConstraint(['variant_name'], ['variant.variant_name'], name=op.f('fk_family_document__variant_name__variant')),
    sa.PrimaryKeyConstraint('physical_document_id', name=op.f('pk_family_document'))
    )
    op.create_table('family_metadata',
    sa.Column('family_id', sa.Text(), nullable=False),
    sa.Column('taxonomy_name', sa.Text(), nullable=False),
    sa.Column('value', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.ForeignKeyConstraint(['family_id'], ['family.id'], name=op.f('fk_family_metadata__family_id__family')),
    sa.ForeignKeyConstraint(['taxonomy_name'], ['metadata_taxonomy.name'], name=op.f('fk_family_metadata__taxonomy_name__metadata_taxonomy')),
    sa.PrimaryKeyConstraint('family_id', 'taxonomy_name', name=op.f('pk_family_metadata'))
    )
    op.create_table('family_organisation',
    sa.Column('family_id', sa.Text(), nullable=False),
    sa.Column('organisation_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['family_id'], ['family.id'], name=op.f('fk_family_organisation__family_id__family')),
    sa.ForeignKeyConstraint(['organisation_id'], ['organisation.id'], name=op.f('fk_family_organisation__organisation_id__organisation')),
    sa.PrimaryKeyConstraint('family_id', 'organisation_id', name=op.f('pk_family_organisation'))
    )
    op.create_table('slug',
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('family_id', sa.Text(), nullable=True),
    sa.Column('family_document_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['family_document_id'], ['family_document.physical_document_id'], name=op.f('fk_slug__family_document_id__family_document')),
    sa.ForeignKeyConstraint(['family_id'], ['family.id'], name=op.f('fk_slug__family_id__family')),
    sa.PrimaryKeyConstraint('name', name=op.f('pk_slug'))
    )
    # ### end Alembic commands ###
    execute("alter table geography alter column id type integer")
    execute("alter table document alter geography_id type integer")
    execute("alter table geo_statistics alter column id type integer")
    execute("alter table geo_statistics alter column geography_id type integer")
    execute("alter sequence geo_statistics_id_seq as integer")
    execute("alter sequence geography_id_seq as integer")

    op.create_check_constraint(
        "must_reference_exactly_one_entity",

        "slug",
        "num_nonnulls(family_id, family_document_id) = 1"
    ) 



def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('document', sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_table('slug')
    op.drop_table('family_organisation')
    op.drop_table('family_metadata')
    op.drop_table('family_document')
    op.drop_table('collection_family')
    op.drop_table('metadata_organisation')
    op.drop_table('family')
    op.drop_table('collection_organisation')
    op.drop_table('variant')
    op.drop_table('metadata_taxonomy')
    op.drop_table('family_type')
    op.drop_table('family_document_type')
    op.drop_table('family_category')
    op.drop_table('collection')
    # ### end Alembic commands ###
