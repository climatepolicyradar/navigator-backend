"""families and collections

Revision ID: 0013
Revises: 0012
Create Date: 2023-02-23 18:28:02.050400

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '0013'
down_revision = '0012'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('collection',
    sa.Column('import_id', sa.Text(), nullable=False),
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('import_id', name=op.f('pk_collection'))
    )
    op.create_table('family_document_type',
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('name', name=op.f('pk_family_document_type'))
    )
    op.create_table('family_document_role',
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('name', name=op.f('pk_family_document_role'))
    )
    op.create_table('family_event_type',
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('name', name=op.f('pk_family_event_type'))
    )
    op.create_table('metadata_taxonomy',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('valid_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_metadata_taxonomy'))
    )
    op.create_table('variant',
    sa.Column('variant_name', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('variant_name', name=op.f('pk_variant'))
    )
    op.create_table('collection_organisation',
    sa.Column('collection_import_id', sa.Text(), nullable=False),
    sa.Column('organisation_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['collection_import_id'], ['collection.import_id'], name=op.f('fk_collection_organisation__collection_import_id__collection')),
    sa.ForeignKeyConstraint(['organisation_id'], ['organisation.id'], name=op.f('fk_collection_organisation__organisation_id__organisation')),
    sa.PrimaryKeyConstraint('collection_import_id', name=op.f('pk_collection_organisation'))
    )
    op.create_table('family',
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('import_id', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('geography_id', sa.Integer(), nullable=False),
    sa.Column('family_category', sa.Enum('EXECUTIVE', 'LEGISLATIVE', name='familycategory'), nullable=False),
    sa.Column('family_status', sa.Enum('CREATED', 'PUBLISHED', 'DELETED', name='familystatus'), nullable=False),
    sa.ForeignKeyConstraint(['geography_id'], ['geography.id'], name=op.f('fk_family__geography_id__geography')),
    sa.PrimaryKeyConstraint('import_id', name=op.f('pk_family'))
    )
    op.create_table('metadata_organisation',
    sa.Column('taxonomy_id', sa.Integer(), nullable=False),
    sa.Column('organisation_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['organisation_id'], ['organisation.id'], name=op.f('fk_metadata_organisation__organisation_id__organisation')),
    sa.ForeignKeyConstraint(['taxonomy_id'], ['metadata_taxonomy.id'], name=op.f('fk_metadata_organisation__taxonomy_id__metadata_taxonomy')),
    sa.PrimaryKeyConstraint('organisation_id', name=op.f('pk_metadata_organisation'))
    )
    op.create_table('collection_family',
    sa.Column('collection_import_id', sa.Text(), nullable=False),
    sa.Column('family_import_id', sa.Text(), nullable=False),
    sa.ForeignKeyConstraint(['collection_import_id'], ['collection.import_id'], name=op.f('fk_collection_family__collection_import_id__collection')),
    sa.ForeignKeyConstraint(['family_import_id'], ['family.import_id'], name=op.f('fk_collection_family__family_import_id__family')),
    sa.PrimaryKeyConstraint('collection_import_id', 'family_import_id', name=op.f('pk_collection_family'))
    )
    op.create_table('family_document',
    sa.Column('family_import_id', sa.Text(), nullable=False),
    sa.Column('physical_document_id', sa.Integer(), nullable=False),
    sa.Column('import_id', sa.Text(), nullable=False),
    sa.Column('variant_name', sa.Text(), nullable=True),
    sa.Column('document_status', sa.Enum('CREATED', 'PUBLISHED', 'DELETED', name='documentstatus'), nullable=False),
    sa.Column('document_type', sa.Text(), nullable=True),
    sa.Column('document_role', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['document_type'], ['family_document_type.name'], name=op.f('fk_family_document__document_type__family_document_type')),
    sa.ForeignKeyConstraint(['document_role'], ['family_document_role.name'], name=op.f('fk_family_document__document_role__family_document_role')),
    sa.ForeignKeyConstraint(['family_import_id'], ['family.import_id'], name=op.f('fk_family_document__family_import_id__family')),
    sa.ForeignKeyConstraint(['physical_document_id'], ['physical_document.id'], name=op.f('fk_family_document__physical_document_id__physical_document')),
    sa.ForeignKeyConstraint(['variant_name'], ['variant.variant_name'], name=op.f('fk_family_document__variant_name__variant')),
    sa.PrimaryKeyConstraint('import_id', name=op.f('pk_family_document')),
    sa.UniqueConstraint('physical_document_id', name=op.f('uq_family_document__physical_document_id'))
    )
    op.create_table('family_metadata',
    sa.Column('family_import_id', sa.Text(), nullable=False),
    sa.Column('taxonomy_id', sa.Integer(), nullable=False),
    sa.Column('value', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.ForeignKeyConstraint(['family_import_id'], ['family.import_id'], name=op.f('fk_family_metadata__family_import_id__family')),
    sa.ForeignKeyConstraint(['taxonomy_id'], ['metadata_taxonomy.id'], name=op.f('fk_family_metadata__taxonomy_id__metadata_taxonomy')),
    sa.PrimaryKeyConstraint('family_import_id', 'taxonomy_id', name=op.f('pk_family_metadata'))
    )
    op.create_table('family_organisation',
    sa.Column('family_import_id', sa.Text(), nullable=False),
    sa.Column('organisation_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['family_import_id'], ['family.import_id'], name=op.f('fk_family_organisation__family_import_id__family')),
    sa.ForeignKeyConstraint(['organisation_id'], ['organisation.id'], name=op.f('fk_family_organisation__organisation_id__organisation')),
    sa.PrimaryKeyConstraint('family_import_id', name=op.f('pk_family_organisation'))
    )
    op.create_table('family_event',
    sa.Column('import_id', sa.Text(), nullable=False),
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('event_type_name', sa.Text(), nullable=False),
    sa.Column('family_import_id', sa.Text(), nullable=False),
    sa.Column('family_document_import_id', sa.Text(), nullable=True),
    sa.Column('status', sa.Enum('OK', 'DUPLICATED', name='eventstatus'), nullable=False),
    sa.ForeignKeyConstraint(['event_type_name'], ['family_event_type.name'], name=op.f('fk_family_event__event_type_name__family_event_type')),
    sa.ForeignKeyConstraint(['family_document_import_id'], ['family_document.import_id'], name=op.f('fk_family_event__family_document_import_id__family_document')),
    sa.ForeignKeyConstraint(['family_import_id'], ['family.import_id'], name=op.f('fk_family_event__family_import_id__family')),
    sa.PrimaryKeyConstraint('import_id', name=op.f('pk_family_event'))
    )
    op.create_table('slug',
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('family_import_id', sa.Text(), nullable=True),
    sa.Column('family_document_import_id', sa.Text(), nullable=True),
    sa.CheckConstraint('num_nonnulls(family_import_id, family_document_import_id) = 1', name=op.f('ck_slug__must_reference_exactly_one_entity')),
    sa.ForeignKeyConstraint(['family_document_import_id'], ['family_document.import_id'], name=op.f('fk_slug__family_document_import_id__family_document')),
    sa.ForeignKeyConstraint(['family_import_id'], ['family.import_id'], name=op.f('fk_slug__family_import_id__family')),
    sa.PrimaryKeyConstraint('name', name='pk_slug')
    )
    op.add_column('physical_document', sa.Column('cdn_object', sa.Text(), nullable=True))
    op.drop_column('physical_document', 'date')
    # ### end Alembic commands ###
    op.execute("alter table geography alter column id type integer")
    op.execute("alter table document alter geography_id type integer")
    op.execute("alter table geo_statistics alter column id type integer")
    op.execute("alter table geo_statistics alter column geography_id type integer")
    op.execute("alter sequence geo_statistics_id_seq as integer")
    op.execute("alter sequence geography_id_seq as integer")


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('physical_document', sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_column('physical_document', 'cdn_object')
    op.drop_table('slug')
    op.drop_table('family_event')
    op.drop_table('family_organisation')
    op.drop_table('family_metadata')
    op.drop_table('family_document')
    op.drop_table('collection_family')
    op.drop_table('metadata_organisation')
    op.drop_table('family')
    op.drop_table('collection_organisation')
    op.drop_table('variant')
    op.drop_table('metadata_taxonomy')
    op.drop_table('family_event_type')
    op.drop_table('family_document_type')
    op.drop_table('collection')
    # ### end Alembic commands ###
